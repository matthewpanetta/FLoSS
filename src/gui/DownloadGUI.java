/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import client.File;
import client.ServerAdapter;
import client.User;

import java.awt.Desktop;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mdp5280
 */
public class DownloadGUI extends javax.swing.JFrame {
    private ServerAdapter serverAdapt;
    private String[] friendsNames;
    private List<User> friendsList;
    private List<File> fileList;
    private String[] fileNames;
    private User user;
    /**
     * Creates new form DownloadGUI
     */
    public DownloadGUI() {
        serverAdapt = ServerAdapter.getInstance();
        fileNames = new String[0];
        //user = new User("mp755", "test123");
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        friendsModel = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        downloadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        //refreshFileList();
        fileListDisplay = new javax.swing.JList();
        refreshButton = new javax.swing.JButton();
        downloadAndOpenButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        viewPermButton = new javax.swing.JButton();
        renameButton = new javax.swing.JButton();
        recoverFilesButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        rollBackButton = new javax.swing.JButton();
        downloadPrevVersion = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Friends List"));

        friendsModel.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(friendsModel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 988, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Home", jPanel2);

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        fileListDisplay.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileListDisplay);

        refreshButton.setText("refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        downloadAndOpenButton.setText("Download and Open");
        downloadAndOpenButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadAndOpenButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        viewPermButton.setText("View Permissions");
        viewPermButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewPermButtonMouseClicked(evt);
            }
        });

        renameButton.setText("Rename");
        renameButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                renameButtonMouseClicked(evt);
            }
        });

        recoverFilesButton.setText("Recover Files");
        recoverFilesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recoverFilesButtonMouseClicked(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        rollBackButton.setText("Roll Back");
        rollBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rollBackButtonMouseClicked(evt);
            }
        });

        downloadPrevVersion.setText("Download Previous Version");
        downloadPrevVersion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadPrevVersionMouseClicked(evt);
            }
        });

        uploadButton.setText("upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewPermButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recoverFilesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rollBackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadButton)
                        .addGap(15, 15, 15)
                        .addComponent(downloadPrevVersion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadAndOpenButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refreshButton)
                        .addComponent(deleteButton)
                        .addComponent(viewPermButton)
                        .addComponent(renameButton)
                        .addComponent(recoverFilesButton)
                        .addComponent(updateButton)
                        .addComponent(rollBackButton)
                        .addComponent(uploadButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(downloadAndOpenButton)
                        .addComponent(downloadButton)
                        .addComponent(downloadPrevVersion)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Files", jPanel1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void setUser(User u){
        this.user = u;
    
    }
    public User getUser(User u){
        return this.user;
    }
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:

        refreshFileList();
        
        fileListDisplay.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileListDisplay);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        downloadFile(null, -1);
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void downloadAndOpenButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadAndOpenButtonMouseClicked
        String filePath = downloadFile(null, -1);
        java.io.File file = new java.io.File(filePath);
        
        try {
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                Logger.getLogger(DownloadGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Unable to open the file.\nThere may not be a default program for the filetype you want to open.");
            }
    }//GEN-LAST:event_downloadAndOpenButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        deleteFile();
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void viewPermButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewPermButtonMouseClicked
        List<String> fileNames = fileListDisplay.getSelectedValuesList();
        int fileID = 0;
        
        List<client.File> collabs = serverAdapt.getAllFiles(user.getUserName());
        
        client.File theFile = null;
        
        for(client.File f : collabs) {
            if(f.getFileName().equals(fileNames.get(0))) {
                theFile = f;
            }
        }
        
        ViewPermissionGUI viewPermGUI = new ViewPermissionGUI();
        viewPermGUI.setUser(user);
        viewPermGUI.setFileID(theFile.getFileID());
        viewPermGUI.setFile(theFile);
        viewPermGUI.getPermissions();
        viewPermGUI.setVisible(true);
    }//GEN-LAST:event_viewPermButtonMouseClicked

    private void renameButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_renameButtonMouseClicked
        List<String> fileNames = fileListDisplay.getSelectedValuesList();
        
        int fileID = 0;
        
        List<client.File> collabs = serverAdapt.getAllFiles(user.getUserName());
        
        client.File theFile = null;
        
        for(client.File f : collabs) {
            if(f.getFileName().equals(fileNames.get(0))) {
                theFile = f;
            }
        }
                
        RenameFileGUI renameFileGUI = new RenameFileGUI();
        renameFileGUI.setUser(user.getUserName());
        renameFileGUI.setOldFileName(fileNames.get(0));
        renameFileGUI.setFile(theFile);
        renameFileGUI.setVisible(true);
    }//GEN-LAST:event_renameButtonMouseClicked

    private void recoverFilesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recoverFilesButtonMouseClicked
        RecoverFileGUI recoverFileGUI = new RecoverFileGUI();
        recoverFileGUI.setUserName(user.getUserName());
        recoverFileGUI.refreshFileList();
        recoverFileGUI.setVisible(true);        
    }//GEN-LAST:event_recoverFilesButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
            List<String> fileNames = fileListDisplay.getSelectedValuesList();
            fileList = serverAdapt.getAllFiles(user.getUserName());
            String owner = user.getUserName();
            int updateNum = -1;
            File file = null;
            
            for(String fileName : fileNames) {
                for(File f : fileList) {
                    if(f.getFileName().equals(fileName)) {
                        owner = f.getOwner();
                        updateNum = f.getUpdateNum();
                        file = f;
                    }
                }
                // Opens a file chooser dialog GUI where the user selects which file(s) they would like to upload.
		JFileChooser chooser = new JFileChooser();
   
		// Restrict the user to certain file formats
		FileNameExtensionFilter filter = new FileNameExtensionFilter("All Acceptable Files", "doc", "docx", "xlsx", "pptx", "txt", "png", "jpg",
			"gif");
		
		chooser.setFileFilter(filter);
		
		// Allow the user to upload multiple files.
		chooser.setMultiSelectionEnabled(true);
		
		int returnVal = chooser.showOpenDialog(null);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			java.io.File[] fileList = chooser.getSelectedFiles();
			for(java.io.File f : fileList){
                                String filePath = f.getPath();
                                int index = filePath.lastIndexOf("\\");
                                String modFilePath = f.getName();
                                
                                serverAdapt.reupload(user, filePath, owner, fileName, updateNum);
                                
                                boolean rename = serverAdapt.renameFileUploadedWithDiffName(user.getUserName(), file, modFilePath, file.getFileName());
                                
                                if(rename) {
                                    JOptionPane.showMessageDialog(this, "File updated successfully!");
                                } else {
                                    JOptionPane.showMessageDialog(this, "Could not update the file. Please try again later.");
                                }
                        }
                }
            }
    }//GEN-LAST:event_updateButtonMouseClicked

    private void rollBackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rollBackButtonMouseClicked
        List<String> fileName = fileListDisplay.getSelectedValuesList();
        File file = serverAdapt.getFile(fileName.get(0), user);
        
        if(file == null) {
            JOptionPane.showMessageDialog(this, "You do not have permission to rollback this file. Please contact the file's owner.");
        } else {        
            RollbackGUI rollbackGUI = new RollbackGUI();
            rollbackGUI.setFile(file);
            rollbackGUI.setUser(user);
            rollbackGUI.setDownloadGUI(this);
            rollbackGUI.updateModel();
            rollbackGUI.setVisible(true);
        }
    }//GEN-LAST:event_rollBackButtonMouseClicked

    private void downloadPrevVersionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadPrevVersionMouseClicked
        List<String> fileName = fileListDisplay.getSelectedValuesList();
        File file = serverAdapt.getFile(fileName.get(0), user);
        
        if(file == null) {
            JOptionPane.showMessageDialog(this, "You do not have permission to rollback this file. Please contact the file's owner.");
        } else {        
            DLPrevVersionGUI dlPrevVersionGUI = new DLPrevVersionGUI();
            dlPrevVersionGUI.setFile(file);
            dlPrevVersionGUI.setUser(user);
            dlPrevVersionGUI.setDownloadGUI(this);
            dlPrevVersionGUI.updateModel();
            dlPrevVersionGUI.setVisible(true);
        }
    }//GEN-LAST:event_downloadPrevVersionMouseClicked

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed

        // Opens a file chooser dialog GUI where the user selects which file(s) they would like to upload.
		JFileChooser chooser = new JFileChooser();
	
        // TESTING PURPOSES DUMMY USER 
		User u = new User("tommy", "patches");
   
		// Restrict the user to certain file formats
		FileNameExtensionFilter filter = new FileNameExtensionFilter("All Acceptable Files", "doc", "docx", "xlsx", "pptx", "txt", "png", "jpg",
			"gif");
		
		chooser.setFileFilter(filter);
		
		// Allow the user to upload multiple files.
		chooser.setMultiSelectionEnabled(true);
		
		int returnVal = chooser.showOpenDialog(null);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			java.io.File[] fileList = chooser.getSelectedFiles();
			for(java.io.File f : fileList){                       
				serverAdapt.upload(u, f.getPath(), u.getUserName());
                                
                                client.File theFile = serverAdapt.getFile(f.getName(), u);
                                AddPermissionGUI addPermGUI = new AddPermissionGUI();
                                addPermGUI.addUser(u);
                                addPermGUI.addFileID(theFile.getFileID());
                                addPermGUI.refreshFriends();
                                addPermGUI.refreshFriendsList();
                                addPermGUI.setVisible(true);
                                
				JOptionPane.showMessageDialog(this, "File uploaded successfully!");
                                refreshFileList();
                        }
                }
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

        if(jTabbedPane1.getSelectedIndex() == 1){
            JOptionPane.showMessageDialog(this, "loading files... this takes time");
            refreshFileList();
             fileListDisplay.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileListDisplay);
        }
        
        /*if(jTabbedPane1.getSelectedIndex() == 0){
            refreshFriends();
            refreshFriendsList();
        }*/
    }//GEN-LAST:event_jTabbedPane1StateChanged

    public void refreshFileList(){
        
        // getFileList takes a string (the username) so just for testing we send it "mp755"
        fileList = serverAdapt.getFileList(user.getUserName());
        fileNames = new String[fileList.size()];
        for(int i = 0; i < fileList.size(); i++){
            File f = fileList.get(i);
            fileNames[i] = f.getFileName();
        }
    }
    
    public void getRecentFiles(){
        refreshFileList();
        recentFiles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(fileListDisplay);
    }
    
    public void getRecentCollabs(){
        fileList = serverAdapt.getCollaborations(user.getUserName());
        fileNames = new String[fileList.size()];
        for(int i = 0; i < fileList.size(); i++){
            File f = fileList.get(i);
            fileNames[i] = f.getFileName();
        }
        
        recentCollabs.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(fileListDisplay);
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DownloadGUI().setVisible(true);
            }
        });
    }
    
    public void deleteFile(){
        List<String> fileNames = fileListDisplay.getSelectedValuesList();
        List<client.File> collabs = serverAdapt.getAllFiles(user.getUserName());
        client.File theFile = null;
        
        
        
        for(int i = 0; i < fileNames.size(); i++){
            for(client.File f : collabs) {
                if(f.getFileName().equals(fileNames.get(0))) {
                    theFile = f;
                }
            }
            
            if(!theFile.getOwner().equals(user.getUserName())) {
                JOptionPane.showMessageDialog(this, "You do not have permission to delete this file.");
            } else {
                boolean deletedFile = serverAdapt.deleteFile(theFile);
                if(deletedFile){
                    JOptionPane.showMessageDialog(this, "File deleted!");
                } else {
                    JOptionPane.showMessageDialog(this, "File not deleted. Please try again.");
                }
            }
        }
    }
    
    public String downloadFile(File toDownload, int flag) {        
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("All Acceptable Files", "doc", "docx", "xlsx", "pptx", "txt", "png", "jpg",
            "gif");
        chooser.setFileFilter(filter);
        chooser.showSaveDialog(this);
        
        if(toDownload == null) {
            List<String> selected = fileListDisplay.getSelectedValuesList();
            List<File> toDownloadList = serverAdapt.getAllFiles(user.getUserName());
            
            
            for(File f : toDownloadList) {
                if(f.getFileName().equals(selected.get(0))) {
                    toDownload = f;
                    break;
                }
            }
        }
        
        java.io.File clientFile = chooser.getSelectedFile();
        String clientPath = clientFile.getAbsolutePath();
            
        return downloadFileFromServer(toDownload, clientPath, flag);
    }
    
    public void refreshFriends() {
        friendsList = serverAdapt.getFriends(user);
        friendsNames = new String[friendsList.size()];
        
        for(int i = 0; i < friendsList.size(); i++) {
            friendsNames[i] = friendsList.get(i).getUserName();
        }
    }
    
    public void refreshFriendsList() {
        friendsModel.setModel(new javax.swing.AbstractListModel() {
            String[] strings = friendsNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(friendsModel);
    }
    
    public String downloadFileFromServer(File toDownload, String clientPath, int flag) {
            String pathToSave = toDownload.getFilePath() + "//" + toDownload.getFileName();

            // Get the file extension. If the user did not specify a file extension, add it onto the file name.
            int extensionIndex = pathToSave.lastIndexOf(".");
            String extension = pathToSave.substring(extensionIndex);
            if(!clientPath.endsWith(extension)) {
                clientPath += extension;
            }
            
            if(serverAdapt.download(user, pathToSave, clientPath, flag)) {
                JOptionPane.showMessageDialog(this, "File successfully downloaded!");
            }

            else {
                JOptionPane.showMessageDialog(this, "Could not retrieve file. Please try again");
            }
            return clientPath;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downloadAndOpenButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton downloadPrevVersion;
    private javax.swing.JList fileListDisplay;
    private javax.swing.JList friendsModel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton recoverFilesButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton renameButton;
    private javax.swing.JButton rollBackButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton uploadButton;
    private javax.swing.JButton viewPermButton;
    // End of variables declaration//GEN-END:variables
}
