/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import client.File;
import client.ServerAdapter;
import client.User;

import java.awt.Desktop;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author mdp5280
 */
public class DownloadGUI extends javax.swing.JFrame {
    private ServerAdapter serverAdapt;
    private List<File> fileList;
    private String[] fileNames;
    private User user;
    /**
     * Creates new form DownloadGUI
     */
    public DownloadGUI() {
        serverAdapt = ServerAdapter.getInstance();
        initComponents();
        user = new User("mp755", "test123");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        downloadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        refreshFileList();
        fileListDisplay = new javax.swing.JList();
        refreshButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        viewPermButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        fileListDisplay.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileListDisplay);

        refreshButton.setText("refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Download and Open");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        viewPermButton.setText("View Permissions");
        viewPermButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewPermButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewPermButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(downloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refreshButton)
                        .addComponent(deleteButton)
                        .addComponent(viewPermButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(downloadButton)))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:

        refreshFileList();
        
        fileListDisplay.setModel(new javax.swing.AbstractListModel() {
            String[] strings = fileNames;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(fileListDisplay);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        downloadFile();
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String filePath = downloadFile();
        java.io.File file = new java.io.File(filePath);
        
        try {
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                Logger.getLogger(DownloadGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Unable to open the file.\nThere may not be a default program for the filetype you want to open.");
            }
    }//GEN-LAST:event_jButton1MouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        deleteFile();
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void viewPermButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewPermButtonMouseClicked
        List<String> fileNames = fileListDisplay.getSelectedValuesList();
        int fileID = 0;
        
        
        client.File file = serverAdapt.getFile(fileNames.get(0), user);
        fileID = file.getFileID();
        
        ViewPermissionGUI viewPermGUI = new ViewPermissionGUI();
        viewPermGUI.setUser(user);
        viewPermGUI.setFileID(fileID);
        viewPermGUI.getPermissions();
        viewPermGUI.setVisible(true);
    }//GEN-LAST:event_viewPermButtonMouseClicked

    private void refreshFileList(){
        
        // getFileList takes a string (the username) so just for testing we send it "mp755"
        fileList = serverAdapt.getFileList("mp755");
      
        fileNames = new String[fileList.size()];
        for(int i = 0; i < fileList.size(); i++){
            File f = fileList.get(i);
            fileNames[i] = f.getFileName();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DownloadGUI().setVisible(true);
            }
        });
    }
    
    public void deleteFile(){
        User u = new User("mp755", "test123");
        List<String> selected = fileListDisplay.getSelectedValuesList();
        for(int i = 0; i < selected.size(); i++){
            File toDelete = serverAdapt.getFile(selected.get(i), u);
            boolean deletedFile = serverAdapt.deleteFile(toDelete);
            if(deletedFile){
                JOptionPane.showMessageDialog(this, "File deleted!");
                
            }
        }
    }
    
    public String downloadFile() {
        String pathToSave;
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("All Acceptable Files", "doc", "docx", "xlsx", "pptx", "txt", "png", "jpg",
            "gif");
        chooser.setFileFilter(filter);
        chooser.showSaveDialog(this);

        User u = new User("mp755", "test123");
        List<String> selected = fileListDisplay.getSelectedValuesList();
        for(int i = 0; i < selected.size(); i++){
            File toDownload = serverAdapt.getFile(selected.get(i), u);

            java.io.File clientFile = chooser.getSelectedFile();
            String clientPath = clientFile.getAbsolutePath();
            pathToSave = toDownload.getFilePath() + "//" + toDownload.getFileName();

            // Get the file extension. If the user did not specify a file extension, add it onto the file name.
            int extensionIndex = pathToSave.lastIndexOf(".");
            String extension = pathToSave.substring(extensionIndex);
            if(!clientPath.endsWith(extension)) {
                clientPath += extension;
            }

            if(serverAdapt.download(u, pathToSave, clientPath)) {
                JOptionPane.showMessageDialog(this, "File successfully downloaded!");
            }

            else {
                JOptionPane.showMessageDialog(this, "Could not retrieve file. Please try again");
            }
            return clientPath;
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JList fileListDisplay;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton viewPermButton;
    // End of variables declaration//GEN-END:variables
}
